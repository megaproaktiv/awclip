// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	"sync"
)

// Ensure, that LambdaInterfaceMock does implement LambdaInterface.
// If this is not the case, regenerate this file with moq.
var _ LambdaInterface = &LambdaInterfaceMock{}

// LambdaInterfaceMock is a mock implementation of LambdaInterface.
//
//     func TestSomethingThatUsesLambdaInterface(t *testing.T) {
//
//         // make and configure a mocked LambdaInterface
//         mockedLambdaInterface := &LambdaInterfaceMock{
//             ListFunctionsFunc: func(ctx context.Context, params *lambda.ListFunctionsInput, optFns ...func(*lambda.Options)) (*lambda.ListFunctionsOutput, error) {
// 	               panic("mock out the ListFunctions method")
//             },
//         }
//
//         // use mockedLambdaInterface in code that requires LambdaInterface
//         // and then make assertions.
//
//     }
type LambdaInterfaceMock struct {
	// ListFunctionsFunc mocks the ListFunctions method.
	ListFunctionsFunc func(ctx context.Context, params *lambda.ListFunctionsInput, optFns ...func(*lambda.Options)) (*lambda.ListFunctionsOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListFunctions holds details about calls to the ListFunctions method.
		ListFunctions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *lambda.ListFunctionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*lambda.Options)
		}
	}
	lockListFunctions sync.RWMutex
}

// ListFunctions calls ListFunctionsFunc.
func (mock *LambdaInterfaceMock) ListFunctions(ctx context.Context, params *lambda.ListFunctionsInput, optFns ...func(*lambda.Options)) (*lambda.ListFunctionsOutput, error) {
	if mock.ListFunctionsFunc == nil {
		panic("LambdaInterfaceMock.ListFunctionsFunc: method is nil but LambdaInterface.ListFunctions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *lambda.ListFunctionsInput
		OptFns []func(*lambda.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListFunctions.Lock()
	mock.calls.ListFunctions = append(mock.calls.ListFunctions, callInfo)
	mock.lockListFunctions.Unlock()
	return mock.ListFunctionsFunc(ctx, params, optFns...)
}

// ListFunctionsCalls gets all the calls that were made to ListFunctions.
// Check the length with:
//     len(mockedLambdaInterface.ListFunctionsCalls())
func (mock *LambdaInterfaceMock) ListFunctionsCalls() []struct {
	Ctx    context.Context
	Params *lambda.ListFunctionsInput
	OptFns []func(*lambda.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *lambda.ListFunctionsInput
		OptFns []func(*lambda.Options)
	}
	mock.lockListFunctions.RLock()
	calls = mock.calls.ListFunctions
	mock.lockListFunctions.RUnlock()
	return calls
}
